# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-24 00:54+0000\n"
"PO-Revision-Date: 2021-03-10 00:20+0000\n"
"Language-Team: Arabic (https://app.transifex.com/sphinx-doc/teams/15434/ar/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ar\n"
"Plural-Forms: nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 && n%100<=99 ? 4 : 5;\n"

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:4
msgid "Developing autodoc extensions"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:6
msgid ""
"The objective of this tutorial is to create an extension that adds support "
"for new type for autodoc. This autodoc extension will format the ``IntEnum``"
" class from Python standard library. (module ``enum``)"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:11
msgid "Overview"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:13
msgid ""
"We want the extension that will create auto-documentation for IntEnum. "
"``IntEnum`` is the integer enum class from standard library ``enum`` module."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:16
msgid "Currently this class has no special auto documentation behavior."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:18
msgid "We want to add following to autodoc:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:20
msgid ""
"A new ``autointenum`` directive that will document the ``IntEnum`` class."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:21
msgid ""
"The generated documentation will have all the enum possible values with "
"names."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:23
msgid ""
"The ``autointenum`` directive will have an option ``:hex:`` which will cause"
" the integers be printed in hexadecimal form."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:28
msgid "Prerequisites"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:30
msgid ""
"We need the same setup as in :ref:`the previous extensions <tutorial-extend-"
"build>`. This time, we will be putting out extension in a file called "
":file:`autodoc_intenum.py`. The :file:`my_enums.py` will contain the sample "
"enums we will document."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:36
msgid "Here is an example of the folder structure you might obtain:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:49
msgid "Writing the extension"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:51
msgid "Start with ``setup`` function for the extension."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:59
msgid ""
"The :meth:`~sphinx.application.Sphinx.setup_extension` method will pull the "
"autodoc extension because our new extension depends on autodoc. "
":meth:`~sphinx.application.Sphinx.add_autodocumenter` is the method that "
"registers our new auto documenter class."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:64
msgid "We want to import certain objects from the autodoc extension:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:72
msgid ""
"There are several different documenter classes such as ``MethodDocumenter`` "
"or ``AttributeDocumenter`` available in the autodoc extension but our new "
"class is the subclass of ``ClassDocumenter`` which a documenter class used "
"by autodoc to document classes."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:77
msgid "This is the definition of our new the auto-documenter class:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:85
msgid "Important attributes of the new class:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:87
msgid "**objtype**"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:88
msgid ""
"This attribute determines the ``auto`` directive name. In this case the auto"
" directive will be ``autointenum``."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:91
msgid "**directivetype**"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:92
msgid ""
"This attribute sets the generated directive name. In this example the "
"generated directive will be ``.. :py:class::``."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:95
msgid "**priority**"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:96
msgid ""
"the larger the number the higher is the priority. We want our documenter be "
"higher priority than the parent."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:99
msgid "**option_spec**"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:100
msgid ""
"option specifications. We copy the parent class options and add a new option"
" *hex*."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:104
msgid "Overridden members:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:106
msgid "**can_document_member**"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:107
msgid ""
"This member is important to override. It should return *True* when the "
"passed object can be documented by this class."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:110
msgid "**add_directive_header**"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:111
msgid ""
"This method generates the directive header. We add **:final:** directive "
"option. Remember to call **super** or no directive will be generated."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:115
msgid "**add_content**"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:116
msgid ""
"This method generates the body of the class documentation. After calling the"
" super method we generate lines for enum description."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:121
msgid "Using the extension"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:123
msgid "You can now use the new autodoc directive to document any ``IntEnum``."
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:125
msgid "For example, you have the following ``IntEnum``:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:127
msgid "my_enums.py"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:138
msgid "This will be the documentation file with auto-documentation directive:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:140
msgid "index.rst"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:146
msgid "Further reading"
msgstr ""

#: ../../sphinx/doc/development/tutorials/autodoc_ext.rst:148
msgid ""
"If you wish to share your extension across multiple projects or with others,"
" check out the :ref:`third-party-extensions` section."
msgstr ""

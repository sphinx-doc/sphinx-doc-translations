# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2024, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-18 00:49+0000\n"
"PO-Revision-Date: 2018-02-12 13:48+0000\n"
"Language-Team: Korean (https://app.transifex.com/sphinx-doc/teams/15434/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sphinx/doc/extdev/markupapi.rst:2
msgid "Docutils markup API"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:4
msgid ""
"This section describes the API for adding reStructuredText markup elements "
"(roles and directives)."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:9
msgid "Roles"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:11
msgid ""
"Roles follow the interface described below. They have to be registered by an"
" extension using :meth:`.Sphinx.add_role` or "
":meth:`.Sphinx.add_role_to_domain`."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:27
msgid ""
"The *options* and *content* parameters are only used for custom roles "
"created via the :dudir:`role` directive. The return value is a tuple of two "
"lists, the first containing the text nodes and elements from the role, and "
"the second containing any system messages generated. For more information, "
"see the `custom role overview`_ from Docutils."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:38
msgid "Creating custom roles"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:40
msgid ""
"Sphinx provides two base classes for creating custom roles, "
":class:`~sphinx.util.docutils.SphinxRole` and "
":class:`~sphinx.util.docutils.ReferenceRole`."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:43
msgid ""
"These provide a class-based interface for creating roles, where the main "
"logic must be implemented in your ``run()`` method. The classes provide a "
"number of useful methods and attributes, such as ``self.text``, "
"``self.config``, and ``self.env``. The ``ReferenceRole`` class implements "
"Sphinx's ``title <target>`` logic, exposing ``self.target`` and "
"``self.title`` attributes. This is useful for creating cross-reference "
"roles."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:53
msgid "Directives"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:55
msgid ""
"Directives are handled by classes derived from "
"``docutils.parsers.rst.Directive``.  They have to be registered by an "
"extension using :meth:`.Sphinx.add_directive` or "
":meth:`.Sphinx.add_directive_to_domain`."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:63
msgid ""
"The markup syntax of the new directive is determined by the follow five "
"class attributes:"
msgstr ""

#: ../docstring of docutils.parsers.rst.Directive.required_arguments:1
msgid "Number of required directive arguments."
msgstr ""

#: ../docstring of docutils.parsers.rst.Directive.optional_arguments:1
msgid "Number of optional arguments after the required arguments."
msgstr ""

#: ../docstring of docutils.parsers.rst.Directive.final_argument_whitespace:1
msgid "May the final argument contain whitespace?"
msgstr ""

#: ../docstring of docutils.parsers.rst.Directive.option_spec:1
msgid "Mapping of option names to validator functions."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:71
msgid ""
"Option validator functions take a single parameter, the option argument (or "
"``None`` if not given), and should validate it or convert it to the proper "
"form.  They raise :exc:`ValueError` or :exc:`TypeError` to indicate failure."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:76
msgid ""
"There are several predefined and possibly useful validators in the "
":mod:`docutils.parsers.rst.directives` module."
msgstr ""

#: ../docstring of docutils.parsers.rst.Directive.has_content:1
msgid "May the directive have content?"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:81
msgid "New directives must implement the :meth:`run` method:"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:85
msgid ""
"This method must process the directive arguments, options and content, and "
"return a list of Docutils/Sphinx nodes that will be inserted into the "
"document tree at the point where the directive was encountered."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:89
msgid "Instance attributes that are always set on the directive are:"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:93
msgid ""
"The directive name (useful when registering the same directive class under "
"multiple names)."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:98
msgid "The arguments given to the directive, as a list."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:102
msgid ""
"The options given to the directive, as a dictionary mapping option names to "
"validated/converted values."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:107
msgid "The directive content, if given, as a :class:`!ViewList`."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:111
msgid ""
"The absolute line number on which the directive appeared.  This is not "
"always a useful value; use :attr:`srcline` instead."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:116
msgid ""
"Internal offset of the directive content.  Used when calling "
"``nested_parse`` (see below)."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:121
msgid "The string containing the entire directive."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:126
msgid ""
"The state and state machine which controls the parsing.  Used for "
"``nested_parse``."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:131
msgid "`Creating directives`_ HOWTO of the Docutils documentation"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:139
msgid "Parsing directive content as reStructuredText"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:141
msgid ""
"Many directives will contain more markup that must be parsed. To do this, "
"use one of the following APIs from the :meth:`~Directive.run` method:"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:144
msgid ":py:meth:`.SphinxDirective.parse_content_to_nodes()`"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:145
msgid ":py:meth:`.SphinxDirective.parse_text_to_nodes()`"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:147
msgid ""
"The first method parses all the directive's content as markup, whilst the "
"second only parses the given *text* string. Both methods return the parsed "
"Docutils nodes in a list."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:151
msgid "The methods are used as follows:"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:164
msgid ""
"The above utility methods were added in Sphinx 7.4. Prior to Sphinx 7.4, the"
" following methods should be used to parse content:"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:167
msgid "``self.state.nested_parse``"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:168
msgid ""
":func:`sphinx.util.nodes.nested_parse_with_titles` -- this allows titles in "
"the parsed content."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:182
msgid ""
"To parse inline markup, use "
":py:meth:`~sphinx.util.docutils.SphinxDirective.parse_inline()`. This must "
"only be used for text which is a single line or paragraph, and does not "
"contain any structural elements (headings, transitions, directives, etc)."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:190
msgid ""
"``sphinx.util.docutils.switch_source_input()`` allows changing the source "
"(input) file during parsing content in a directive. It is useful to parse "
"mixed content, such as in ``sphinx.ext.autodoc``, where it is used to parse "
"docstrings."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:208
msgid ""
"Until Sphinx 1.6, ``sphinx.ext.autodoc.AutodocReporter`` was used for this "
"purpose.  It is replaced by ``switch_source_input()``."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:215
msgid "ViewLists and StringLists"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:217
msgid ""
"Docutils represents document source lines in a ``StringList`` class, which "
"inherits from ``ViewList``, both in the ``docutils.statemachine`` module. "
"This is a list with extended functionality, including that slicing creates "
"views of the original list and that the list contains information about "
"source line numbers."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:223
msgid ""
"The :attr:`Directive.content` attribute is a ``StringList``. If you generate"
" content to be parsed as reStructuredText, you have to create a "
"``StringList`` for the Docutils APIs. The utility functions provided by "
"Sphinx handle this automatically. Important for content generation are the "
"following points:"
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:229
msgid ""
"The ``ViewList`` constructor takes a list of strings (lines) and a source "
"(document) name."
msgstr ""

#: ../../sphinx/doc/extdev/markupapi.rst:231
msgid ""
"The ``ViewList.append()`` method takes a line and a source name as well."
msgstr ""

# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2024, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2024
# Takayuki SHIMIZUKAWA <shimizukawa@gmail.com>, 2024
# Naofumi SAKAGUCHI <nskgch@gmail.com>, 2024
# Rafael Fontenelle <rffontenelle@gmail.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-03 00:54+0000\n"
"PO-Revision-Date: 2024-06-28 00:41+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/sphinx-doc/teams/15434/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:4
msgid "Adding a reference domain"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:6
msgid ""
"The objective of this tutorial is to illustrate roles, directives and "
"domains. Once complete, we will be able to use this extension to describe a "
"recipe and reference that recipe from elsewhere in our documentation."
msgstr ""
"このチュートリアルは、ロール、ディレクティブ、ドメインの解説を目的としています。修了後には、レシピを記述する拡張の利用と、レシピをドキュメント内の別の場所から参照できるようになります。"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:12
msgid ""
"This tutorial is based on a guide first published on `opensource.com`_ and "
"is provided here with the original author's permission."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:19
msgid "Overview"
msgstr "概要"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:21
msgid "We want the extension to add the following to Sphinx:"
msgstr "以下のような拡張機能をSphinxに追加したいとします:"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:23
msgid ""
"A ``recipe`` :term:`directive`, containing some content describing the "
"recipe steps, along with a ``:contains:`` option highlighting the main "
"ingredients of the recipe."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:27
msgid ""
"A ``ref`` :term:`role`, which provides a cross-reference to the recipe "
"itself."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:30
msgid ""
"A ``recipe`` :term:`domain`, which allows us to tie together the above role "
"and domain, along with things like indices."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:33
msgid "For that, we will need to add the following elements to Sphinx:"
msgstr "これを実現するためには、Sphinxに以下の項目を追加する必要があるでしょう:"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:35
msgid "A new directive called ``recipe``"
msgstr "``recipe`` と呼ばれる新しいディレクティブ"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:37
msgid "New indexes to allow us to reference ingredient and recipes"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:39
msgid ""
"A new domain called ``recipe``, which will contain the ``recipe`` directive "
"and ``ref`` role"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:44
msgid "Prerequisites"
msgstr "前提条件"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:46
msgid ""
"We need the same setup as in :ref:`the previous extensions <tutorial-extend-"
"build>`. This time, we will be putting out extension in a file called "
":file:`recipe.py`."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:51
msgid "Here is an example of the folder structure you might obtain:"
msgstr "フォルダ構造として次のようなものが得られるでしょう:"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:63
msgid "Writing the extension"
msgstr "拡張機能の書き方"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:65
msgid ""
"Open :file:`recipe.py` and paste the following code in it, all of which we "
"will explain in detail shortly:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:72
msgid ""
"Let's look at each piece of this extension step-by-step to explain what's "
"going on."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:76
msgid "The directive class"
msgstr "ディレクティブクラス"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:77
msgid "The first thing to examine is the ``RecipeDirective`` directive:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:84
msgid ""
"Unlike :ref:`tutorial-extending-syntax` and :ref:`tutorial-extend-build`, "
"this directive doesn't derive from :class:`docutils.parsers.rst.Directive` "
"and doesn't define a ``run`` method. Instead, it derives from "
":class:`sphinx.directives.ObjectDescription` and defines  "
"``handle_signature`` and ``add_target_and_index`` methods. This is because "
"``ObjectDescription`` is a special-purpose directive that's intended for "
"describing things like classes, functions, or, in our case, recipes. More "
"specifically, ``handle_signature`` implements parsing the signature of the "
"directive and passes on the object's name and type to its superclass, while "
"``add_target_and_index`` adds a target (to link to) and an entry to the "
"index for this node."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:96
msgid ""
"We also see that this directive defines ``has_content``, "
"``required_arguments`` and ``option_spec``. Unlike the ``TodoDirective`` "
"directive added in the :ref:`previous tutorial <tutorial-extend-build>`, "
"this directive takes a single argument, the recipe name, and an option, "
"``contains``, in addition to the nested reStructuredText in the body."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:104
msgid "The index classes"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:107
msgid "Todo"
msgstr "Todo"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:107
msgid "Add brief overview of indices"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:119
msgid ""
"Both ``IngredientIndex`` and ``RecipeIndex`` are derived from "
":class:`Index`. They implement custom logic to generate a tuple of values "
"that define the index. Note that ``RecipeIndex`` is a simple index that has "
"only one entry. Extending it to cover more object types is not yet part of "
"the code."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:124
msgid ""
"Both indices use the method :meth:`Index.generate` to do their work. This "
"method combines the information from our domain, sorts it, and returns it in"
" a list structure that will be accepted by Sphinx. This might look "
"complicated but all it really is is a list of tuples like ``('tomato', "
"'TomatoSoup', 'test', 'rec-TomatoSoup',...)``. Refer to the :doc:`domain API"
" guide </extdev/domainapi>` for more information on this API."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:131
msgid ""
"These index pages can be referenced with the :rst:role:`ref` role by "
"combining the domain name and the index ``name`` value. For example, "
"``RecipeIndex`` can be referenced with ``:ref:`recipe-recipe``` and "
"``IngredientIndex`` can be referenced with ``:ref:`recipe-ingredient```."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:137
msgid "The domain"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:138
msgid ""
"A Sphinx domain is a specialized container that ties together roles, "
"directives, and indices, among other things. Let's look at the domain we're "
"creating here."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:147
msgid ""
"There are some interesting things to note about this ``recipe`` domain and "
"domains in general. Firstly, we actually register our directives, roles and "
"indices here, via the ``directives``, ``roles`` and ``indices`` attributes, "
"rather than via calls later on in ``setup``. We can also note that we aren't"
" actually defining a custom role and are instead reusing the "
":class:`sphinx.roles.XRefRole` role and defining the "
":class:`sphinx.domains.Domain.resolve_xref` method. This method takes two "
"arguments, ``typ`` and ``target``, which refer to the cross-reference type "
"and its target name. We'll use ``target`` to resolve our destination from "
"our domain's ``recipes`` because we currently have only one type of node."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:158
msgid ""
"Moving on, we can see that we've defined ``initial_data``. The values "
"defined in ``initial_data`` will be copied to "
"``env.domaindata[domain_name]`` as the initial data of the domain, and "
"domain instances can access it via ``self.data``. We see that we have "
"defined two items in ``initial_data``: ``recipes`` and "
"``recipe_ingredients``. Each contains a list of all objects defined (i.e. "
"all recipes) and a hash that maps a canonical ingredient name to the list of"
" objects. The way we name objects is common across our extension and is "
"defined in the ``get_full_qualified_name`` method. For each object created, "
"the canonical name is ``recipe.<recipename>``, where ``<recipename>`` is the"
" name the documentation writer gives the object (a recipe). This enables the"
" extension to use different object types that share the same name. Having a "
"canonical name and central place for our objects is a huge advantage. Both "
"our indices and our cross-referencing code use this feature."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:173
msgid "The ``setup`` function"
msgstr "``setup`` 関数"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:176
msgid ""
":ref:`As always <tutorial-extend-build>`, the ``setup`` function is a "
"requirement and is used to hook the various parts of our extension into "
"Sphinx. Let's look at the ``setup`` function for this extension."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:186
msgid ""
"This looks a little different to what we're used to seeing. There are no "
"calls to :meth:`~Sphinx.add_directive` or even :meth:`~Sphinx.add_role`. "
"Instead, we have a single call to :meth:`~Sphinx.add_domain` followed by "
"some initialization of the :doc:`standard domain </usage/domains/standard>`."
" This is because we had already registered our directives, roles and indexes"
" as part of the directive itself."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:195
msgid "Using the extension"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:197
msgid "You can now use the extension throughout your project. For example:"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:199
msgid "index.rst"
msgstr "index.rst"

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:212
msgid "tomato-soup.rst"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:223
msgid ""
"The important things to note are the use of the ``:recipe:ref:`` role to "
"cross-reference the recipe actually defined elsewhere (using the "
"``:recipe:recipe:`` directive)."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:229
msgid "Further reading"
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:231
msgid ""
"For more information, refer to the `docutils`_ documentation and "
":doc:`/extdev/index`."
msgstr ""

#: ../../sphinx/doc/development/tutorials/adding_domain.rst:234
msgid ""
"If you wish to share your extension across multiple projects or with others,"
" check out the :ref:`third-party-extensions` section."
msgstr ""

# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2024, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# wendi cao <651645601@qq.com>, 2023
# Lu <lu2github@gmail.com>, 2023
# cdarlint <cdarling@126.com>, 2023
# Melia Lee <lixiuyu97@163.com>, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-28 00:52+0000\n"
"PO-Revision-Date: 2023-10-03 00:37+0000\n"
"Last-Translator: Melia Lee <lixiuyu97@163.com>, 2023\n"
"Language-Team: Chinese (China) (https://app.transifex.com/sphinx-doc/teams/15434/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../sphinx/doc/usage/domains/cpp.rst:5
msgid "The C++ Domain"
msgstr "C++ 域"

#: ../../sphinx/doc/usage/domains/cpp.rst:9
msgid "The C++ domain (name **cpp**) supports documenting C++ projects."
msgstr "C++ 域（名称 **cpp**）支持记录C++ 项目。"

#: ../../sphinx/doc/usage/domains/cpp.rst:12
msgid "Directives for Declaring Entities"
msgstr "用于声明实体的指令"

#: ../../sphinx/doc/usage/domains/cpp.rst:14
msgid ""
"The following directives are available. All declarations can start with a "
"visibility statement (``public``, ``private`` or ``protected``)."
msgstr "以下指令可用。所有声明都可以从可见性声明开始（“公共”，“四人”或“受保护的”）。"

#: ../../sphinx/doc/usage/domains/cpp.rst:20
msgid ""
"Describe a class/struct, possibly with specification of inheritance, e.g.,::"
msgstr "描述一个类或结构，可能带有继承规范，例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:24
msgid ""
"The difference between :rst:dir:`cpp:class` and :rst:dir:`cpp:struct` is "
"only cosmetic: the prefix rendered in the output, and the specifier shown in"
" the index."
msgstr ""
" :rst:dir:`cpp:class` 和:rst:dir:`cpp:struct` "
"之间的区别只是修饰性的:输出中呈现的前缀，以及索引中显示的说明符。"

#: ../../sphinx/doc/usage/domains/cpp.rst:28
msgid "The class can be directly declared inside a nested scope, e.g.,::"
msgstr "该类可以直接在嵌套范围内声明，例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:32
msgid "A class template can be declared::"
msgstr "可以声明一个类模板::"

#: ../../sphinx/doc/usage/domains/cpp.rst:36
msgid "or with a line break::"
msgstr "或者换行::"

#: ../../sphinx/doc/usage/domains/cpp.rst:41
msgid "Full and partial template specialisations can be declared::"
msgstr "可以声明完整和部分模板特化："

#: ../../sphinx/doc/usage/domains/cpp.rst:49
msgid "The :rst:dir:`cpp:struct` directive."
msgstr ":rst:dir:`cpp:struct` 指令。"

#: ../../sphinx/doc/usage/domains/cpp.rst:54
msgid "Describe a function or member function, e.g.,::"
msgstr "描述一个函数或成员函数，例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:80
msgid "Function templates can also be described::"
msgstr "函数模板也可以描述："

#: ../../sphinx/doc/usage/domains/cpp.rst:85
msgid "and function template specialisations::"
msgstr "和函数模板专业化："

#: ../../sphinx/doc/usage/domains/cpp.rst:93
msgid ""
"Ensures that the function's parameters will be emitted on a single logical "
"line, overriding :confval:`cpp_maximum_signature_line_length` and "
":confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:102
msgid "Describe a variable or member variable, e.g.,::"
msgstr "描述变量或成员变量，例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:110
msgid "Variable templates can also be described::"
msgstr "变量模板也可以描述："

#: ../../sphinx/doc/usage/domains/cpp.rst:119
msgid ""
"Describe a type as in a typedef declaration, a type alias declaration, or "
"simply the name of a type with unspecified type, e.g.,::"
msgstr "描述typedef声明中的类型，类型别名声明，或者只是具有未指定类型的类型的名称，例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:134
msgid "A type alias can also be templated::"
msgstr "类型别名也可以模板化："

#: ../../sphinx/doc/usage/domains/cpp.rst:139
msgid "The example are rendered as follows."
msgstr "该示例呈现如下。"

#: ../../sphinx/doc/usage/domains/cpp.rst:145
msgid "A typedef-like declaration of a type."
msgstr "类型的typedef式声明。"

#: ../../sphinx/doc/usage/domains/cpp.rst:151
msgid "Declaration of a type alias with unspecified type."
msgstr "声明具有未指定类型的类型别名。"

#: ../../sphinx/doc/usage/domains/cpp.rst:157
msgid "Declaration of a type alias."
msgstr "声明类型别名。"

#: ../../sphinx/doc/usage/domains/cpp.rst:168
msgid ""
"Describe a (scoped) enum, possibly with the underlying type specified.  Any "
"enumerators declared inside an unscoped enum will be declared both in the "
"enum scope and in the parent scope.  Examples::"
msgstr "描述（范围）枚举，可能具有指定的基础类型。在unscoped枚举中声明的任何枚举器都将在枚举范围和父范围内声明。例子："

#: ../../sphinx/doc/usage/domains/cpp.rst:192
msgid "Describe an enumerator, optionally with its value defined, e.g.,::"
msgstr "描述一个枚举器，可选择定义其值，例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:200
msgid "Describe a union."
msgstr "描述联。"

#: ../../sphinx/doc/usage/domains/cpp.rst:206
#: ../../sphinx/doc/usage/domains/cpp.rst:369
msgid ""
"The support for concepts is experimental. It is based on the current draft "
"standard and the Concepts Technical Specification. The features may change "
"as they evolve."
msgstr "对概念的支持是实验性的。它基于当前的标准草案和概念技术规范。这些功能可能随着它们的发展而变化。"

#: ../../sphinx/doc/usage/domains/cpp.rst:210
msgid ""
"Describe a concept. It must have exactly 1 template parameter list. The name"
" may be a nested name. Example::"
msgstr "描述一个概念。它必须有1个模板参数列表。名称可以是嵌套名称。例："

#: ../../sphinx/doc/usage/domains/cpp.rst:230
msgid "This will render as follows:"
msgstr "这将呈现如下："

#: ../../sphinx/doc/usage/domains/cpp.rst:236
msgid ""
"Proxy to an element of a notional sequence that can be compared, indirected,"
" or incremented."
msgstr "可比较、间接或递增的概念性序列的一个元素的代理。"

#: ../../sphinx/doc/usage/domains/cpp.rst:239
msgid "**Notation**"
msgstr "**符号**"

#: ../../sphinx/doc/usage/domains/cpp.rst:243
msgid "An lvalue."
msgstr "一个左值。"

#: ../../sphinx/doc/usage/domains/cpp.rst:245
msgid "**Valid Expressions**"
msgstr "**有效表达**"

#: ../../sphinx/doc/usage/domains/cpp.rst:247
msgid ":cpp:expr:`*r`, when :cpp:expr:`r` is dereferenceable."
msgstr ":cpp:expr:`*r`，当 :cpp:expr:`r` 是可解除引用的。"

#: ../../sphinx/doc/usage/domains/cpp.rst:248
msgid ""
":cpp:expr:`++r`, with return type :cpp:expr:`It&`, when :cpp:expr:`r` is "
"incrementable."
msgstr ":cpp:expr:`++r`，返回类型 :cpp:expr:`It&`， 当 :cpp:expr:`r` 是可递增的。"

#: ../../sphinx/doc/usage/domains/cpp.rst:255
#: ../../sphinx/doc/usage/domains/cpp.rst:349
msgid "Options"
msgstr "选项"

#: ../../sphinx/doc/usage/domains/cpp.rst:257
msgid "Some directives support options:"
msgstr "一些指令支持选项:"

#: ../../sphinx/doc/usage/domains/cpp.rst:259
msgid ""
"``:no-index-entry:`` and ``:no-contents-entry:``, see :ref:`basic-domain-"
"markup`."
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:260
msgid ""
"``:tparam-line-spec:``, for templated declarations. If specified, each "
"template parameter will be rendered on a separate line."
msgstr "“:tparam-line-spec:”，用于模板化声明。如果指定，则每个模板参数将在单独的行上呈现。"

#: ../../sphinx/doc/usage/domains/cpp.rst:266
msgid "Anonymous Entities"
msgstr "匿名的实体"

#: ../../sphinx/doc/usage/domains/cpp.rst:268
msgid ""
"C++ supports anonymous namespaces, classes, enums, and unions. For the sake "
"of documentation they must be given some name that starts with ``@``, e.g., "
"``@42`` or ``@data``. These names can also be used in cross-references and "
"(type) expressions, though nested symbols will be found even when omitted. "
"The ``@...`` name will always be rendered as **[anonymous]** (possibly as a "
"link)."
msgstr ""
"C++ 支持匿名命名空间、类、枚举和联合。为了文档起见，必须给它们一些以 “@ ”开头的名字，例如，“@42”或 "
"“@data”。这些名称也可以在交叉引用和（类型）表达中使用，尽管嵌套符号即使在省略时也会被找到。 "
"“@...”名称将始终显示为**[匿名]**（可能作为链接）。"

#: ../../sphinx/doc/usage/domains/cpp.rst:276
msgid "Example::"
msgstr "例如::"

#: ../../sphinx/doc/usage/domains/cpp.rst:288
msgid "This will be rendered as:"
msgstr "这将呈现为："

#: ../../sphinx/doc/usage/domains/cpp.rst:306
msgid ""
"Explicit ref: :cpp:var:`Data::@data::a`. Short-hand ref: :cpp:var:`Data::a`."
msgstr "显式ref: :cpp:var:`Data::@data::a` 。简写ref: :cpp:var:`Data::a`。"

#: ../../sphinx/doc/usage/domains/cpp.rst:312
msgid "Aliasing Declarations"
msgstr "别名声明"

#: ../../sphinx/doc/usage/domains/cpp.rst:314
msgid ""
"Sometimes it may be helpful list declarations elsewhere than their main "
"documentation, e.g., when creating a synopsis of a class interface. The "
"following directive can be used for this purpose."
msgstr "有时，除了主要文档之外，它可能是有用的列表声明，例如，在创建类接口的概要时。以下指令可用于此目的。"

#: ../../sphinx/doc/usage/domains/cpp.rst:320
msgid ""
"Insert one or more alias declarations. Each entity can be specified as they "
"can in the :rst:role:`cpp:any` role. If the name of a function is given (as "
"opposed to the complete signature), then all overloads of the function will "
"be listed."
msgstr ""
"插入一个或多个别名声明。可以在  :rst:role:`cpp:any` "
"角色中指定每个实体。如果给出了函数的名称（而不是完整的签名），那么将列出函数的所有重载。"

#: ../../sphinx/doc/usage/domains/cpp.rst:325
msgid "For example::"
msgstr "例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:330
#: ../../sphinx/doc/usage/domains/cpp.rst:340
msgid "becomes"
msgstr "变成"

#: ../../sphinx/doc/usage/domains/cpp.rst:335
msgid "whereas::"
msgstr "whereas::"

#: ../../sphinx/doc/usage/domains/cpp.rst:352
msgid ""
"Insert nested declarations as well, up to the total depth given. Use 0 for "
"infinite depth and 1 for just the mentioned declaration. Defaults to 1."
msgstr "也可以插入嵌套的声明，最多可以达到给定的总深度。使用0表示无限的深度，使用1表示 mentioned declaration 。默认为1。"

#: ../../sphinx/doc/usage/domains/cpp.rst:360
msgid ""
"Skip the mentioned declarations and only render nested declarations. "
"Requires ``maxdepth`` either 0 or at least 2."
msgstr "跳过 mentioned declarations ，只渲染嵌套的声明。要求 ``maxdepth`` 为0或至少为2。"

#: ../../sphinx/doc/usage/domains/cpp.rst:367
msgid "Constrained Templates"
msgstr "约束模板"

#: ../../sphinx/doc/usage/domains/cpp.rst:373
msgid "Sphinx does not currently support ``requires`` clauses."
msgstr "Sphinx目前不支持“requires”条款。"

#: ../../sphinx/doc/usage/domains/cpp.rst:376
msgid "Placeholders"
msgstr "占位符"

#: ../../sphinx/doc/usage/domains/cpp.rst:378
msgid ""
"Declarations may use the name of a concept to introduce constrained template"
" parameters, or the keyword ``auto`` to introduce unconstrained template "
"parameters::"
msgstr "声明可以使用概念的名称来引入受约束的模板参数，或者使用关键字“auto”来引入无约束的模板参数："

#: ../../sphinx/doc/usage/domains/cpp.rst:392
msgid "Template Introductions"
msgstr "模板介绍"

#: ../../sphinx/doc/usage/domains/cpp.rst:394
msgid ""
"Simple constrained function or class templates can be declared with a "
"`template introduction` instead of a template parameter list::"
msgstr "可以使用`template introduction`而不是模板参数列表声明简单约束函数或类模板："

#: ../../sphinx/doc/usage/domains/cpp.rst:407
msgid "They are rendered as follows."
msgstr "它们呈现如下。"

#: ../../sphinx/doc/usage/domains/cpp.rst:413
msgid ""
"A function template with a template parameter constrained to be an Iterator."
msgstr "具有模板参数的函数模板被约束为迭代器。"

#: ../../sphinx/doc/usage/domains/cpp.rst:419
msgid ""
"A class template with a template parameter constrained to be "
"LessThanComparable."
msgstr "具有模板参数的类模板约束为 LessThanComparable。"

#: ../../sphinx/doc/usage/domains/cpp.rst:422
msgid ""
"Note however that no checking is performed with respect to parameter "
"compatibility. E.g., ``Iterator{A, B, C}`` will be accepted as an "
"introduction even though it would not be valid C++."
msgstr "但请注意，不会对参数兼容性进行检查。例如，“`template introduction`”将被接受作为介绍，即使它不是有效的 C++。"

#: ../../sphinx/doc/usage/domains/cpp.rst:427
msgid "Inline Expressions and Types"
msgstr "内联表达式和类型"

#: ../../sphinx/doc/usage/domains/cpp.rst:432
msgid ""
"Insert a C++ expression or type either as inline code (``cpp:expr``) or "
"inline text (``cpp:texpr``). For example::"
msgstr "插入C++ 表达式或键入内联代码（“`cpp:expr”）或内联文本 （“cpp:texpr”）。例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:444
msgid "will be rendered as follows:"
msgstr "将呈现如下："

#: ../../sphinx/doc/usage/domains/cpp.rst:454
msgid ""
"An expression: :cpp:expr:`a * f(a)` (or as text: :cpp:texpr:`a * f(a)`)."
msgstr "表达式: :cpp:expr:`a * f(a)`（或文本:  :cpp:texpr:`a * f(a)`）。"

#: ../../sphinx/doc/usage/domains/cpp.rst:456
msgid ""
"A type: :cpp:expr:`const MySortedContainer<int>&` (or as text "
":cpp:texpr:`const MySortedContainer<int>&`)."
msgstr ""
"类型:  :cpp:expr:`const MySortedContainer<int>&` （或作为文本:cpp:texpr:`const "
"MySortedContainer<int>&`）。"

#: ../../sphinx/doc/usage/domains/cpp.rst:459
msgid "The :rst:role:`cpp:expr` role."
msgstr " :rst:role:`cpp:expr`角色。"

#: ../../sphinx/doc/usage/domains/cpp.rst:462
msgid "The :rst:role:`cpp:texpr` role."
msgstr " :rst:role:`cpp:texpr` 角色。"

#: ../../sphinx/doc/usage/domains/cpp.rst:466
msgid "Namespacing"
msgstr "命名空间"

#: ../../sphinx/doc/usage/domains/cpp.rst:468
msgid ""
"Declarations in the C++ domain are as default placed in global scope.  The "
"current scope can be changed using three namespace directives.  They manage "
"a stack declarations where ``cpp:namespace`` resets the stack and changes a "
"given scope."
msgstr ""
"c++域中的声明默认放在全局作用域中。可以使用三个名称空间指令更改当前范围。它们管理一个堆栈声明，其中“cpp:namespace”重置堆栈并更改给定的范围。"

#: ../../sphinx/doc/usage/domains/cpp.rst:473
msgid ""
"The ``cpp:namespace-push`` directive changes the scope to a given inner "
"scope of the current one."
msgstr "“cpp:namespace-push” 指令将范围更改为当前范围的给定内部范围。"

#: ../../sphinx/doc/usage/domains/cpp.rst:476
msgid ""
"The ``cpp:namespace-pop`` directive undoes the most recent ``cpp:namespace-"
"push`` directive."
msgstr "“cpp:namespace-pop” 指令撤消了最新的 “cpp:namespace-push” 指令。"

#: ../../sphinx/doc/usage/domains/cpp.rst:481
msgid ""
"Changes the current scope for the subsequent objects to the given scope, and"
" resets the namespace directive stack.  Note that the namespace does not "
"need to correspond to C++ namespaces, but can end in names of classes, "
"e.g.,::"
msgstr "将后续对象的当前范围更改为给定范围，并重置命名空间指令堆栈。请注意，命名空间不需要与C++ 命名空间相对应，但可以以类的名称结尾，例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:487
msgid ""
"All subsequent objects will be defined as if their name were declared with "
"the scope prepended. The subsequent cross-references will be searched for "
"starting in the current scope."
msgstr "将定义所有后续对象，就好像它们的名称是在前置范围的情况下声明的一样。将在当前范围中搜索后续交叉引用。"

#: ../../sphinx/doc/usage/domains/cpp.rst:491
msgid ""
"Using ``NULL``, ``0``, or ``nullptr`` as the scope will change to global "
"scope."
msgstr "使用“NULL”，“0”或“nullptr”作为范围将变为全局范围。"

#: ../../sphinx/doc/usage/domains/cpp.rst:494
msgid "A namespace declaration can also be templated, e.g.,::"
msgstr "命名空间声明也可以模板化，例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:503
msgid ""
"declares ``size`` as a member function of the class template "
"``std::vector``.  Equivalently this could have been declared using::"
msgstr "将“size”声明为类模板“std::vector”的成员函数。等价地，这可以使用::"

#: ../../sphinx/doc/usage/domains/cpp.rst:511
msgid "or::"
msgstr "或者:::"

#: ../../sphinx/doc/usage/domains/cpp.rst:518
msgid "Change the scope relatively to the current scope. For example, after::"
msgstr "相对于当前范围更改范围。例如，之后："

#: ../../sphinx/doc/usage/domains/cpp.rst:524
msgid "the current scope will be ``A::B::C::D``."
msgstr "当前范围将是“A::B::C::D”。"

#: ../../sphinx/doc/usage/domains/cpp.rst:530
msgid ""
"Undo the previous ``cpp:namespace-push`` directive (*not* just pop a scope)."
" For example, after::"
msgstr "撤消之前的“cpp:namespace-push”指令（*不* 只是弹出作用域）。例如，之后："

#: ../../sphinx/doc/usage/domains/cpp.rst:539
msgid "the current scope will be ``A::B`` (*not* ``A::B::C``)."
msgstr "当前范围将是“A::B”（*不是*“A::B::C”）。"

#: ../../sphinx/doc/usage/domains/cpp.rst:541
msgid ""
"If no previous ``cpp:namespace-push`` directive has been used, but only a "
"``cpp:namespace`` directive, then the current scope will be reset to global "
"scope.  That is, ``.. cpp:namespace:: A::B`` is equivalent to::"
msgstr ""
"如果没有使用先前的“cpp:namespace-"
"push”指令，但只使用“cpp:namespace”指令，则当前作用域将重置为全局作用域。也就是说，“.. cpp:namespace:: "
"A::B”相当于："

#: ../../sphinx/doc/usage/domains/cpp.rst:552
msgid "Info field lists"
msgstr "信息字段列表"

#: ../../sphinx/doc/usage/domains/cpp.rst:554
msgid ""
"All the C++ directives for declaring entities support the following info "
"fields (see also :ref:`info-field-lists`):"
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:557
msgid "``tparam``: Description of a template parameter."
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:559
msgid ""
"The :rst:dir:`cpp:function` directive additionally supports the following "
"fields:"
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:562
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``: Description of a parameter."
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:563
msgid "``returns``, ``return``: Description of a return value."
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:564
msgid ""
"``retval``, ``retvals``: An alternative to ``returns`` for describing the "
"result of the function."
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:566
msgid ""
"``throws``, ``throw``, ``exception``: Description of a possibly thrown "
"exception."
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:568
msgid "The ``retval`` field type."
msgstr ""

#: ../../sphinx/doc/usage/domains/cpp.rst:574
msgid "Cross-referencing"
msgstr "交叉引用"

#: ../../sphinx/doc/usage/domains/cpp.rst:576
msgid "These roles link to the given declaration types:"
msgstr "这些角色链接到给定的声明类型："

#: ../../sphinx/doc/usage/domains/cpp.rst:589
msgid ""
"Reference a C++ declaration by name (see below for details).  The name must "
"be properly qualified relative to the position of the link."
msgstr "按名称引用C++ 声明（有关详细信息，请参见下文）。名称必须相对于链接的位置适当限定。"

#: ../../sphinx/doc/usage/domains/cpp.rst:592
msgid ""
"The :rst:role:`cpp:struct` role as alias for the :rst:role:`cpp:class` role."
msgstr "将:rst:role:`cpp:struct` 角色作为:rst:role:`cpp:class`角色的别名。"

#: ../../sphinx/doc/usage/domains/cpp.rst:596
msgid "Note on References with Templates Parameters/Arguments"
msgstr "有关模板参数/参数的引用的注释"

#: ../../sphinx/doc/usage/domains/cpp.rst:598
msgid ""
"These roles follow the Sphinx :ref:`xref-syntax` rules. This means care must"
" be taken when referencing a (partial) template specialization, e.g. if the "
"link looks like this: ``:cpp:class:`MyClass<int>```. This is interpreted as "
"a link to ``int`` with a title of ``MyClass``. In this case, escape the "
"opening angle bracket with a backslash, like this: "
"``:cpp:class:`MyClass\\<int>```."
msgstr ""
"这些角色遵循Sphinx :ref:`xref-"
"syntax`规则。这意味着在引用（部分）模板专门化时必须小心，例如：如果链接看起来像这样:“:cpp:class:`MyClass<int>`”。这被解释为“int”的链接，标题为“MyClass”。在这种情况下，用反斜杠转义开口尖括号，如下所示:“:cpp:class:`MyClass\\<int>`”。"

#: ../../sphinx/doc/usage/domains/cpp.rst:605
msgid ""
"When a custom title is not needed it may be useful to use the roles for "
"inline expressions, :rst:role:`cpp:expr` and :rst:role:`cpp:texpr`, where "
"angle brackets do not need escaping."
msgstr ""
"当不需要自定义标题时，使用内联表达式的角色可能会很有用，如 "
":rst:role:`cpp:expr`和:rst:role:`cpp:texpr`，其中尖括号不需要转义。"

#: ../../sphinx/doc/usage/domains/cpp.rst:610
msgid "Declarations without template parameters and template arguments"
msgstr "没有模板参数和模板参数的声明"

#: ../../sphinx/doc/usage/domains/cpp.rst:612
msgid ""
"For linking to non-templated declarations the name must be a nested name, "
"e.g., ``f`` or ``MyClass::f``."
msgstr "对于链接到非模板化声明，名称必须是嵌套名称，例如“f”或“MyClass::f”。"

#: ../../sphinx/doc/usage/domains/cpp.rst:617
msgid "Overloaded (member) functions"
msgstr "重载（成员）函数"

#: ../../sphinx/doc/usage/domains/cpp.rst:619
msgid ""
"When a (member) function is referenced using just its name, the reference "
"will point to an arbitrary matching overload. The :rst:role:`cpp:any` and "
":rst:role:`cpp:func` roles use an alternative format, which simply is a "
"complete function declaration. This will resolve to the exact matching "
"overload. As example, consider the following class declaration:"
msgstr ""
"当仅使用其名称引用（成员）函数时，引用将指向任意匹配的重载。 :rst:role:`cpp:any` 和  :rst:role:`cpp:func` "
"使用另一种格式，它只是一个完整的函数声明。这将解决完全匹配的重载。例如，请考虑以下类声明："

#: ../../sphinx/doc/usage/domains/cpp.rst:644
msgid "References using the :rst:role:`cpp:func` role:"
msgstr "引用使用:rst:role:`cpp:func` 角色："

#: ../../sphinx/doc/usage/domains/cpp.rst:646
msgid "Arbitrary overload: ``C::f``, :cpp:func:`C::f`"
msgstr "任意的过载：“C::f”， :cpp:func:`C::f`"

#: ../../sphinx/doc/usage/domains/cpp.rst:647
msgid "Also arbitrary overload: ``C::f()``, :cpp:func:`C::f()`"
msgstr "还是任意的重载：“C::f()`”，:cpp:func:`C::f()`"

#: ../../sphinx/doc/usage/domains/cpp.rst:648
msgid "Specific overload: ``void C::f()``, :cpp:func:`void C::f()`"
msgstr "特定的重载：“`void C::f()”， :cpp:func:`void C::f()`"

#: ../../sphinx/doc/usage/domains/cpp.rst:649
msgid "Specific overload: ``void C::f(int)``, :cpp:func:`void C::f(int)`"
msgstr "具体超负荷：“void C::f(int)”，:cpp:func:`void C::f(int)`"

#: ../../sphinx/doc/usage/domains/cpp.rst:650
msgid ""
"Specific overload: ``void C::f(double)``, :cpp:func:`void C::f(double)`"
msgstr "具体超负荷：“void C::f(double)”，:cpp:func:`void C::f(double)`"

#: ../../sphinx/doc/usage/domains/cpp.rst:651
msgid ""
"Specific overload: ``void C::f(double) const``, :cpp:func:`void C::f(double)"
" const`"
msgstr "具体超负荷：“void C::f(double) const”， :cpp:func:`void C::f(double) const`"

#: ../../sphinx/doc/usage/domains/cpp.rst:654
msgid ""
"Note that the :confval:`add_function_parentheses` configuration variable "
"does not influence specific overload references."
msgstr "请注意 :confval:`add_function_parentheses`  配置变量不会影响特定的重载引用。"

#: ../../sphinx/doc/usage/domains/cpp.rst:661
msgid "Templated declarations"
msgstr "模板声明"

#: ../../sphinx/doc/usage/domains/cpp.rst:663
#: ../../sphinx/doc/usage/domains/cpp.rst:706
msgid "Assume the following declarations."
msgstr "假设以下声明。"

#: ../../sphinx/doc/usage/domains/cpp.rst:679
msgid ""
"In general the reference must include the template parameter declarations, "
"and template arguments for the prefix of qualified names. For example:"
msgstr "通常，引用必须包含模板参数声明和限定名称前缀的模板参数。例如："

#: ../../sphinx/doc/usage/domains/cpp.rst:682
msgid ""
"``template\\<typename TOuter> Wrapper::Outer`` "
"(:cpp:class:`template\\<typename TOuter> Wrapper::Outer`)"
msgstr ""
"``template\\<typename TOuter> Wrapper::Outer`` "
"(:cpp:class:`template\\<typename TOuter> Wrapper::Outer`)"

#: ../../sphinx/doc/usage/domains/cpp.rst:684
msgid ""
"``template\\<typename TOuter> template\\<typename TInner> "
"Wrapper::Outer<TOuter>::Inner`` (:cpp:class:`template\\<typename TOuter> "
"template\\<typename TInner> Wrapper::Outer<TOuter>::Inner`)"
msgstr ""
"``template\\<typename TOuter> template\\<typename TInner> "
"Wrapper::Outer<TOuter>::Inner`` (:cpp:class:`template\\<typename TOuter> "
"template\\<typename TInner> Wrapper::Outer<TOuter>::Inner`)"

#: ../../sphinx/doc/usage/domains/cpp.rst:687
msgid ""
"Currently the lookup only succeed if the template parameter identifiers are "
"equal strings.  That is, ``template\\<typename UOuter> Wrapper::Outer`` will"
" not work."
msgstr ""
"目前，如果模板参数标识符是相等的字符串，则查找仅成功。也就是说，“template\\<typename UOuter> "
"Wrapper::Outer”将不起作用。"

#: ../../sphinx/doc/usage/domains/cpp.rst:691
msgid ""
"As a shorthand notation, if a template parameter list is omitted, then the "
"lookup will assume either a primary template or a non-template, but not a "
"partial template specialisation. This means the following references work as"
" well:"
msgstr "作为简写表示法，如果省略模板参数列表，则查找将采用主模板或非模板，而不是部分模板特化。这意味着以下参考资料也有效："

#: ../../sphinx/doc/usage/domains/cpp.rst:696
msgid "``Wrapper::Outer`` (:cpp:class:`Wrapper::Outer`)"
msgstr "``Wrapper::Outer`` (:cpp:class:`Wrapper::Outer`)"

#: ../../sphinx/doc/usage/domains/cpp.rst:698
msgid "``Wrapper::Outer::Inner`` (:cpp:class:`Wrapper::Outer::Inner`)"
msgstr "``Wrapper::Outer::Inner`` (:cpp:class:`Wrapper::Outer::Inner`)"

#: ../../sphinx/doc/usage/domains/cpp.rst:700
msgid ""
"``template\\<typename TInner> Wrapper::Outer::Inner`` "
"(:cpp:class:`template\\<typename TInner> Wrapper::Outer::Inner`)"
msgstr ""
"``template\\<typename TInner> Wrapper::Outer::Inner`` "
"(:cpp:class:`template\\<typename TInner> Wrapper::Outer::Inner`)"

#: ../../sphinx/doc/usage/domains/cpp.rst:704
msgid "(Full) Template Specialisations"
msgstr "（完整）模板专业化"

#: ../../sphinx/doc/usage/domains/cpp.rst:733
msgid ""
"In general the reference must include a template parameter list for each "
"template argument list.  The full specialisation above can therefore be "
"referenced with ``template\\<> Outer\\<int>`` (:cpp:class:`template\\<> "
"Outer\\<int>`) and ``template\\<> template\\<> Outer\\<int>::Inner\\<bool>``"
" (:cpp:class:`template\\<> template\\<> Outer\\<int>::Inner\\<bool>`).  As a"
" shorthand the empty template parameter list can be omitted, e.g., "
"``Outer\\<int>`` (:cpp:class:`Outer\\<int>`) and "
"``Outer\\<int>::Inner\\<bool>`` (:cpp:class:`Outer\\<int>::Inner\\<bool>`)."
msgstr ""
"通常，引用必须包含每个模板参数列表的模板参数列表。 因此可以参考上面的完整专业化“template\\<> Outer\\1`” "
"(:cpp:class:`template\\<> Outer\\2`) "
"和“template\\<>template\\<>Outer\\<int>::Inner\\<bool>”(template<>template<>Outer<int>::Inner<bool>).。作为简写，可以省略空模板参数列表，例如，“Outer\\<int>“”(Outer<int>)"
" 和“Outer\\<int>::Inner\\<bool>”(Outer<int>::Inner<bool>)。"

#: ../../sphinx/doc/usage/domains/cpp.rst:743
msgid "Partial Template Specialisations"
msgstr "部分模板专业化"

#: ../../sphinx/doc/usage/domains/cpp.rst:745
msgid "Assume the following declaration."
msgstr "假设以下声明。"

#: ../../sphinx/doc/usage/domains/cpp.rst:752
msgid ""
"References to partial specialisations must always include the template "
"parameter lists, e.g., ``template\\<typename T> Outer\\<T*>`` "
"(:cpp:class:`template\\<typename T> Outer\\<T*>`).  Currently the lookup "
"only succeed if the template parameter identifiers are equal strings."
msgstr ""
"对部分特化的引用必须始终包含模板参数列表，例如，“template\\<typename T>Outer\\<T*>`` "
"(:cpp:class:`template\\<typename T> "
"Outer\\<T*>`)。目前，只有当模板参数标识符是相等的字符串时，查找才会成功。"

#: ../../sphinx/doc/usage/domains/cpp.rst:758
msgid "Configuration Variables"
msgstr "配置变量"

#: ../../sphinx/doc/usage/domains/cpp.rst:760
msgid "See :ref:`cpp-config`."
msgstr "请参阅:ref:`cpp-config`。"

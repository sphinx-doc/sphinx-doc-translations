# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2025, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-15 02:06+0000\n"
"PO-Revision-Date: 2018-06-26 15:58+0000\n"
"Language-Team: Italian (Italy) (https://app.transifex.com/sphinx-doc/teams/15434/it_IT/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: it_IT\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../sphinx/doc/usage/extensions/autodoc.rst:4
msgid ":mod:`sphinx.ext.autodoc` -- Include documentation from docstrings"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:15
msgid ""
"This extension can import the modules you are documenting, and pull in "
"documentation from docstrings in a semi-automatic way."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:20
msgid ""
":mod:`~sphinx.ext.autodoc` **imports** the modules to be documented. If any "
"modules have side effects on import, these will be executed by ``autodoc`` "
"when :program:`sphinx-build` is run."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:24
msgid ""
"If you document scripts (as opposed to library modules), make sure that the "
"main routine is protected by an ``if __name__ == '__main__'`` condition."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:28
msgid ""
"For this to work, the docstrings must of course be written in correct "
"reStructuredText. You can then use all of the usual Sphinx markup in the "
"docstrings, and it will end up correctly in the documentation. Together with"
" hand-written documentation, this technique eases the pain of having to "
"maintain two locations for documentation, while at the same time avoiding "
"auto-generated-looking pure API documentation."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:36
msgid ""
"If you prefer `NumPy`_ or `Google`_ style docstrings over reStructuredText, "
"you can also enable the :mod:`napoleon <sphinx.ext.napoleon>` extension. "
":mod:`!napoleon` is a preprocessor that converts docstrings to correct "
"reStructuredText before ``autodoc`` processes them."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:46
msgid "Getting started"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:50
msgid "Setup"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:52
msgid ""
"Activate the plugin by adding ``'sphinx.ext.autodoc'`` to the "
":confval:`extensions` list in :file:`conf.py`:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:64
msgid "Ensuring the code can be imported"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:66
msgid ""
":mod:`~sphinx.ext.autodoc` analyses the code and docstrings by introspection"
" after **importing the modules**. For importing to work, you have to make "
"sure that your modules can be found by Sphinx and that dependencies can be "
"resolved (if your module does ``import foo``, but ``foo`` is not available "
"in the python environment that Sphinx runs in, your module import will "
"fail)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:73
msgid "There are two ways to ensure this:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:75
msgid ""
"Use an environment that contains your package and Sphinx. This can e.g. be "
"your local development environment (with an editable install), or an "
"environment in CI in which you install Sphinx and your package. The regular "
"installation process ensures that your package can be found by Sphinx and "
"that all dependencies are available."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:81
msgid ""
"It is alternatively possible to patch the Sphinx run so that it can operate "
"directly on the sources; e.g. if you want to be able to do a Sphinx build "
"from a source checkout."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:85
msgid ""
"Patch :data:`sys.path` in :file:`conf.py` to include your source path. For "
"example if you have a repository structure with :file:`doc/conf.py` and your"
" package is at :file:`src/my_package`, then you should add the following to "
"your :file:`conf.py`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:97
msgid ""
"To cope with missing dependencies, specify the missing modules in the "
":confval:`autodoc_mock_imports` setting."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:102
msgid "Usage"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:104
msgid ""
"You can now use the :ref:`autodoc-directives` to add formatted documentation"
" for Python code elements like functions, classes, modules, etc. For "
"example, to document the function ``io.open()``, reading its signature and "
"docstring from the source file, you'd write:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:113
msgid ""
"You can also document whole classes or even modules automatically, using "
"member options for the auto directives, like:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:122
msgid ""
"As a hint to autodoc extension, you can put a ``::`` separator between the "
"module name and the object name to let autodoc know the correct module, if "
"it is ambiguous:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:132
msgid "Marking objects as public or private"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:134
msgid ""
"autodoc considers a member private if its docstring contains ``:meta "
"private:`` in its :ref:`info-field-lists`. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:148
msgid ""
"autodoc considers a member public if its docstring contains ``:meta "
"public:`` in its :ref:`info-field-lists`, even if it starts with an "
"underscore. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:163
msgid ""
"autodoc considers a variable member does not have any default value if its "
"docstring contains ``:meta hide-value:`` in its :ref:`info-field-lists`. "
"Example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:177
msgid "Doc comments and docstrings"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:179
msgid ""
"Python has no built-in support for docstrings for module data members or "
"class attributes. To allow documenting these, ``autodoc`` recognises a "
"special format of :ref:`comment <python:comments>` called a 'doc comment' or"
" 'documentation comment'."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:184
msgid ""
"These comments start with a colon and an optional space character, ``'#:'`` "
"or ``'#:Â '``. To be recognised, the comments must appear either on the same "
"line as the variable or on one or more lines before the variable. Multi-line"
" doc-comments must always  appear on the lines before the variable's "
"definition."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:191
msgid ""
"For example, all three of the following variables have valid doc-comments:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:205
msgid ""
"Alternatively, ``autodoc`` can recognise a docstring on the line immediately"
" following the definition."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:208
msgid ""
"In the the following class definition, all attributes have documentation "
"recognised by ``autodoc``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:236
msgid "Directives"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:238
msgid ""
":mod:`autodoc` provides several directives that are versions of the usual "
":rst:dir:`py:module`, :rst:dir:`py:class` and so forth. On parsing time, "
"they import the corresponding module and extract the docstring of the given "
"objects, inserting them into the page source under a suitable "
":rst:dir:`py:module`, :rst:dir:`py:class` etc. directive."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:247
msgid ""
"Just as :rst:dir:`py:class` respects the current :rst:dir:`py:module`, "
":rst:dir:`autoclass` will also do so. Likewise, :rst:dir:`automethod` will "
"respect the current :rst:dir:`py:class`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:253
msgid "Default directive options"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:255
msgid ""
"To make any of the options described below the default, use the "
":confval:`autodoc_default_options` dictionary in :file:`conf.py`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:258
msgid ""
"If using defaults for the ``:members:``, ``:exclude-members:``, ``:private-"
"members:``, or ``:special-members:`` options, setting the option on a "
"directive will override the default. Instead, to extend the default list "
"with the per-directive option, the list may be prepended with a plus sign "
"(``+``), as follows:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:272
msgid ""
"If using :confval:`autodoc_default_options`, the defaults can be disabled "
"per-directive with the negated form, :samp:`:no-{option}:` as an option of "
"the directive For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:284
msgid "Automatically document modules"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:288
msgid ""
"Document a module. By default, the directive only inserts the docstring of "
"the module itself:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:295
#: ../../sphinx/doc/usage/extensions/autodoc.rst:540
#: ../../sphinx/doc/usage/extensions/autodoc.rst:815
#: ../../sphinx/doc/usage/extensions/autodoc.rst:897
msgid "will produce source like this:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:303
#: ../../sphinx/doc/usage/extensions/autodoc.rst:548
msgid ""
"The directive can also contain content of its own, which will be inserted "
"into the resulting non-auto directive source after the docstring (but before"
" any automatic member documentation)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:307
#: ../../sphinx/doc/usage/extensions/autodoc.rst:552
#: ../../sphinx/doc/usage/extensions/autodoc.rst:909
msgid ""
"Therefore, you can also mix automatic and non-automatic member "
"documentation, as follows:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:320
#: ../../sphinx/doc/usage/extensions/autodoc.rst:581
#: ../../sphinx/doc/usage/extensions/autodoc.rst:867
#: ../../sphinx/doc/usage/extensions/autodoc.rst:925
msgid "Options"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:324
msgid ""
"Do not generate an index entry for the documented module or any auto-"
"documented members."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:332
msgid ""
"Do not generate an index entry for the documented module or any auto-"
"documented members. Unlike ``:no-index:``, cross-references are still "
"created."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:341
msgid ""
"Indicate platforms on which the module is available. This is identical to "
":rst:dir:`py:module`'s ``:platform:`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:347
msgid ""
"A sentence describing the module's purpose. This is identical to "
":rst:dir:`py:module`'s ``:synopsis:`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:355
msgid ""
"Mark a module as deprecated. This is identical to :rst:dir:`py:module`'s "
"``:deprecated:`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:363
msgid "Do not use ``__all__`` when analysing the module to document."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:368
#: ../../sphinx/doc/usage/extensions/autodoc.rst:623
msgid "Options for selecting members to document"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:372
msgid "Generate automatic documentation for all members of the target module:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:379
msgid ""
"By default, ``autodoc`` only includes public members with a docstring or "
":ref:`doc-comment <doc-comment>` (``#:``). If ``__all__`` exists, it will be"
" used to define which members are public, unless the :rst:dir:`:ignore-"
"module-all: <automodule:ignore-module-all>` option is set."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:385
#: ../../sphinx/doc/usage/extensions/autodoc.rst:638
msgid ""
"To only document certain members, an explicit comma-separated list may be "
"used as the argument to ``:members:``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:396
#: ../../sphinx/doc/usage/extensions/autodoc.rst:649
msgid "Exclude the given names from the members to document. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:410
msgid ""
"To prevent documentation of imported classes or functions, in an "
":rst:dir:`!automodule` directive with the ``members`` option set, only "
"module members where the ``__module__`` attribute is equal to the module "
"name given to ``automodule`` will be documented."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:415
msgid ""
"Set the ``imported-members`` option if you want to prevent this behavior and"
" document all available members."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:418
msgid ""
"Note that attributes from imported modules will not be documented, because "
"attribute documentation is discovered by parsing the source file of the "
"current module."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:427
msgid ""
"Generate automatic documentation for members of the target module that don't"
" have a docstring or doc-comment. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:440
msgid ""
"Generate automatic documentation for private members of the target module. "
"This includes names with a leading underscore (e.g. ``_private``) and those "
"members explicitly marked as private with ``:meta private:``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:450
#: ../../sphinx/doc/usage/extensions/autodoc.rst:726
msgid ""
"To only document certain private members, an explicit comma-separated list "
"may be used as the argument to ``:private-members:``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:460
#: ../../sphinx/doc/usage/extensions/autodoc.rst:488
#: ../../sphinx/doc/usage/extensions/autodoc.rst:764
msgid "The option can now take a comma-separated list of arguments."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:466
msgid ""
"Generate automatic documentation for special members of the target module, "
"also known as :ref:`'dunder' names <python:specialnames>`. This includes all"
" names enclosed with a double-underscore, e.g. ``__special__``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:477
#: ../../sphinx/doc/usage/extensions/autodoc.rst:753
msgid ""
"To only document certain special members, an explicit comma-separated list "
"may be used as the argument to ``:special-members:``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:492
#: ../../sphinx/doc/usage/extensions/autodoc.rst:768
msgid "Options for documented members"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:496
#: ../../sphinx/doc/usage/extensions/autodoc.rst:772
msgid ""
"Choose the ordering of automatically documented members (default: "
"``alphabetical``). This overrides the :confval:`autodoc_member_order` "
"setting."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:500
msgid "``alphabetical``: Use simple alphabetical order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:502
msgid ""
"``groupwise``: Group by object type (class, function, etc), use alphabetical"
" order within groups."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:505
msgid ""
"``bysource``: Use the order of objects in the module's source. The "
"``__all__`` variable can be used to override this order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:509
#: ../../sphinx/doc/usage/extensions/autodoc.rst:785
msgid ""
"Note that for source order, the module must be a Python module with the "
"source code available."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:513
#: ../../sphinx/doc/usage/extensions/autodoc.rst:789
msgid "Support the ``'bysource'`` option."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:519
msgid ""
"Enable the :rst:dir:`:show-inheritance: <autoclass:show-inheritance>` option"
" for all members of the module, if ``:members:`` is enabled."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:527
msgid "Automatically document classes or exceptions"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:532
msgid ""
"Document a class. For exception classes, prefer ``.. autoexception::``. By "
"default, the directive only inserts the docstring of the class itself:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:565
#: ../../sphinx/doc/usage/extensions/autodoc.rst:851
msgid "Advanced usage"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:566
#: ../../sphinx/doc/usage/extensions/autodoc.rst:852
msgid ""
"It is possible to override the signature for explicitly documented callable "
"objects (functions, methods, classes) with the regular syntax that will "
"override the signature gained from introspection:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:576
#: ../../sphinx/doc/usage/extensions/autodoc.rst:862
msgid ""
"This is useful if the signature from the method is hidden by a decorator."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:585
msgid ""
"Do not generate an index entry for the documented class or any auto-"
"documented members."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:593
msgid ""
"Do not generate an index entry for the documented class or any auto-"
"documented members. Unlike ``:no-index:``, cross-references are still "
"created."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:602
msgid ""
"Select which docstring will be used for the main body of the directive. This"
" overrides the global value of :confval:`autoclass_content`. The possible "
"values are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:606
msgid ""
"``class``: Only use the class's docstring. The :meth:`!__init__` method can "
"be separately documented using the ``:members:`` option or "
":rst:dir:`automethod`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:610
msgid "``init``: Only use the docstring of the :meth:`!__init__` method."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:612
msgid ""
"``both``: Use both, appending the docstring of the :meth:`!__init__` method "
"to the class's docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:616
msgid ""
"If the :meth:`!__init__` method doesn't exist or has a blank docstring, "
"``autodoc`` will attempt to use the :meth:`!__new__` method's docstring, if "
"it exists and is not blank."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:627
msgid "Generate automatic documentation for all members of the target class:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:634
msgid ""
"By default, ``autodoc`` only includes public members with a docstring or "
":ref:`doc-comment <doc-comment>` (``#:``) that are attributes of the target "
"class (i.e. not inherited)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:663
msgid ""
"To generate automatic documentation for members inherited from base classes,"
" use the ``:inherited-members:`` option:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:672
msgid ""
"This can be combined with the ``:undoc-members:`` option to generate "
"automatic documentation for *all* available members of the class."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:675
msgid ""
"The members of classes listed in the argument to ``:inherited-members:`` are"
" excluded from the automatic documentation. This defaults to "
":py:class:`python:object` if no argument is provided, meaning that members "
"of the ``object`` class are not documented. To include these, use ``None`` "
"as the argument."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:681
msgid ""
"For example; If your class ``MyList`` is derived from ``list`` class and you"
" don't want to document ``list.__len__()``, you should specify a option "
"``:inherited-members: list`` to avoid special members of list class."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:687
msgid ""
"Should any of the inherited members use a format other than reStructuredText"
" for their docstrings, there may be markup warnings or errors."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:693
msgid ""
"``:inherited-members:`` now takes the name of a base class to exclude as an "
"argument."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:697
msgid "A comma separated list of base class names can be used."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:703
msgid ""
"Generate automatic documentation for members of the target class that don't "
"have a docstring or doc-comment. For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:716
msgid ""
"Generate automatic documentation for private members of the target class. "
"This includes names with a leading underscore (e.g. ``_private``) and those "
"members explicitly marked as private with ``:meta private:``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:736
msgid "The option can now take arguments."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:742
msgid ""
"Generate automatic documentation for special members of the target class, "
"also known as :ref:`'dunder' names <python:specialnames>`. This includes all"
" names enclosed with a double-underscore, e.g. ``__special__``:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:776
msgid "``'alphabetical'``: Use simple alphabetical order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:778
msgid ""
"``'groupwise'``: Group by object type (class, function, etc), use "
"alphabetical order within groups."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:781
msgid ""
"``'bysource'``: Use the order of objects in the module's source. The "
"``__all__`` variable can be used to override this order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:795
msgid "Insert the class's base classes after the class signature."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:801
msgid "Automatically document function-like objects"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:808
msgid ""
"Document a function, method, property, or decorator. By default, the "
"directive only inserts the docstring of the function itself:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:823
#: ../../sphinx/doc/usage/extensions/autodoc.rst:905
msgid ""
"The directive can also contain content of its own, which will be inserted "
"into the resulting non-auto directive source after the docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:827
msgid ""
"Therefore, you can also mix automatic and non-automatic documentation, as "
"follows:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:836
msgid ":rst:dir:`autodecorator`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:838
msgid ":rst:dir:`autoproperty`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:843
msgid ""
"If you document decorated functions or methods, keep in mind that "
"``autodoc`` retrieves its docstrings by importing the module and inspecting "
"the ``__doc__`` attribute of the given function or method. That means that "
"if a decorator replaces the decorated function with another, it must copy "
"the original ``__doc__`` to the new function."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:871
msgid "Do not generate an index entry for the documented function."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:878
msgid ""
"Do not generate an index entry for the documented function. Unlike ``:no-"
"index:``, cross-references are still created."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:885
msgid "Automatically document attributes or data"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:890
msgid ""
"Document a module level variable or constant ('data') or class attribute. By"
" default, the directive only inserts the docstring of the variable itself:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:918
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` can now extract docstrings."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:921
msgid "Doc-comments are now allowed on the same line of an assignment."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:929
msgid ""
"Do not generate an index entry for the documented variable or constant."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:936
msgid ""
"Do not generate an index entry for the documented variable or constant. "
"Unlike ``:no-index:``, cross-references are still created."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:946
msgid ""
"By default, ``autodoc`` attempts to obtain the type annotation and value of "
"the variable by introspection, displaying it after the variable's name. To "
"override this, a custom string for the variable's value may be used as the "
"argument to ``annotation``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:952
msgid ""
"For example, if the runtime value of ``FILE_MODE`` is ``0o755``, the "
"displayed value will be ``493`` (as ``oct(493) == '0o755'``). This can be "
"fixed by setting ``:annotation: = 0o755``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:956
msgid ""
"If ``:annotation:`` is used without arguments, no value or type hint will be"
" shown for the variable."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:963
msgid ""
"To display the type hint of the variable without a value, use the ``:no-"
"value:`` option. If both the ``:annotation:`` and ``:no-value:`` options are"
" used, ``:no-value:`` has no effect."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:970
msgid "Configuration"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:972
msgid "There are also config values that you can set:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:0
msgid "Type"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:0
msgid "Default"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:978
msgid ""
"This value selects what content will be inserted into the main body of an "
":rst:dir:`autoclass` directive.  The possible values are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:981
msgid "``'class'``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:982
msgid ""
"Only the class' docstring is inserted.  You can still document ``__init__`` "
"as a separate method using :rst:dir:`automethod` or the ``members`` option "
"to :rst:dir:`autoclass`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:985
msgid "``'both'``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:986
msgid ""
"Both the class' and the ``__init__`` method's docstring are concatenated and"
" inserted."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:988
msgid "``'init'``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:989
msgid "Only the ``__init__`` method's docstring is inserted."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:993
msgid ""
"If the class has no ``__init__`` method or if the ``__init__`` method's "
"docstring is empty, but the class has a ``__new__`` method's docstring, it "
"is used instead."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1003
msgid ""
"This value selects how the signature will be displayed for the class defined"
" by :rst:dir:`autoclass` directive.  The possible values are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1006
msgid "``'mixed'``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1007
msgid "Display the signature with the class name."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1008
msgid "``'separated'``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1009
msgid "Display the signature as a method."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1017
msgid ""
"Define the order in which :rst:dir:`automodule` and :rst:dir:`autoclass` "
"members are listed. Supported values are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1020
msgid "``'alphabetical'``: Use alphabetical order."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1023
msgid "``'groupwise'``: order by member type. The order is:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1025
msgid "for modules, exceptions, classes, functions, data"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1026
msgid "for classes: class methods, static methods, methods,"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1027
msgid "and properties/attributes"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1029
msgid "Members are ordered alphabetically within groups."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1031
msgid ""
"``'bysource'``: Use the order in which the members appear in the source "
"code. This requires that the module must be a Python module with the source "
"code available."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1037
msgid "Support for ``'bysource'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1044
msgid ""
"The default options for autodoc directives.  They are applied to all autodoc"
" directives automatically.  It must be a dictionary which maps option names "
"to the values.  For example:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1058
msgid ""
"Setting ``None`` or ``True`` to the value is equivalent to giving only the "
"option name to the directives."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1061
msgid "The supported options are:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1063
msgid "``'members'``: See :rst:dir:`automodule:members`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1064
msgid "``'undoc-members'`` See :rst:dir:`automodule:undoc-members`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1065
msgid "``'private-members'``: See :rst:dir:`automodule:private-members`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1066
msgid "``'special-members'``: See :rst:dir:`automodule:special-members`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1067
msgid "``'inherited-members'``: See :rst:dir:`autoclass:inherited-members`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1068
msgid "``'imported-members'``: See :rst:dir:`automodule:imported-members`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1069
msgid "``'exclude-members'``: See :rst:dir:`automodule:exclude-members`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1070
msgid "``'ignore-module-all'``: See :rst:dir:`automodule:ignore-module-all`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1071
msgid "``'member-order'``: See :rst:dir:`automodule:member-order`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1072
msgid "``'show-inheritance'``: See :rst:dir:`autoclass:show-inheritance`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1073
msgid "``'class-doc-from'``: See :rst:dir:`autoclass:class-doc-from`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1074
msgid "``'no-value'``: See :rst:dir:`autodata:no-value`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1075
msgid "``'no-index'``: See :rst:dir:`automodule:no-index`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1076
msgid "``'no-index-entry'``: See :rst:dir:`automodule:no-index-entry`."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1080
msgid "Accepts ``True`` as a value."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1083
msgid "Added ``'imported-members'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1086
msgid "Added ``'class-doc-from'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1089
msgid "Added ``'no-value'``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1096
msgid ""
"Functions imported from C modules cannot be introspected, and therefore the "
"signature for such functions cannot be automatically determined.  However, "
"it is an often-used convention to put the signature into the first line of "
"the function's docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1101
msgid ""
"If this boolean value is set to ``True`` (which is the default), autodoc "
"will look at the first line of the docstring for functions and methods, and "
"if it looks like a signature, use the line as the signature and remove it "
"from the docstring content."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1106
msgid ""
"autodoc will continue to look for multiple signature lines, stopping at the "
"first line that does not look like a signature. This is useful for declaring"
" overloaded function signatures."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1113
msgid "Support overloaded signatures"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1117
msgid "Overloaded signatures do not need to be separated by a backslash"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1123
msgid ""
"This value contains a list of modules to be mocked up. This is useful when "
"some external dependencies are not met at build time and break the building "
"process. You may only specify the root package of the dependencies "
"themselves and omit the sub-modules:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1132
msgid "Will mock all imports under the ``django`` package."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1136
msgid ""
"This config value only requires to declare the top-level modules that should"
" be mocked."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1144
msgid ""
"This value controls how to represent typehints.  The setting takes the "
"following values:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1147
msgid "``'signature'`` -- Show typehints in the signature"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1148
msgid ""
"``'description'`` -- Show typehints as content of the function or method The"
" typehints of overloaded functions or methods will still be represented in "
"the signature."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1151
msgid "``'none'`` -- Do not show typehints"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1152
msgid ""
"``'both'`` -- Show typehints in the signature and as content of the function"
" or method"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1155
msgid ""
"Overloaded functions or methods will not have typehints included in the "
"description because it is impossible to accurately represent all possible "
"overloads as a list of parameters."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1162
msgid "New option ``'description'`` is added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1166
msgid "New option ``'both'`` is added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1172
msgid ""
"This value controls whether the types of undocumented parameters and return "
"values are documented when :confval:`autodoc_typehints` is set to "
"``'description'``. Supported values:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1177
msgid ""
"``'all'``: Types are documented for all parameters and return values, "
"whether they are documented or not."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1180
msgid ""
"``'documented'``: Types will only be documented for a parameter or a return "
"value that is already documented by the docstring."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1183
msgid ""
"``'documented_params'``: Parameter types will only be annotated if the "
"parameter is documented in the docstring. The return type is always "
"annotated (except if it is ``None``)."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1192
msgid "New option ``'documented_params'`` is added."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1198
msgid ""
"A dictionary for users defined `type aliases`__ that maps a type name to the"
" full-qualified object name.  It is used to keep type aliases not evaluated "
"in the document."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1202
msgid ""
"The type aliases are only available if your program enables :pep:`Postponed "
"Evaluation of Annotations (PEP 563) <563>` feature via ``from __future__ "
"import annotations``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1206
msgid "For example, there is code using a type alias:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1217
msgid ""
"If ``autodoc_type_aliases`` is not set, autodoc will generate internal mark-"
"up from this code as following:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1226
msgid ""
"If you set ``autodoc_type_aliases`` as ``{'AliasType': "
"'your.module.AliasType'}``, it generates the following document internally:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1243
msgid ""
"This value controls the format of typehints.  The setting takes the "
"following values:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1246
msgid ""
"``'fully-qualified'`` -- Show the module name and its name of typehints"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1247
msgid ""
"``'short'`` -- Suppress the leading module names of the typehints (e.g. "
"``io.StringIO`` -> ``StringIO``)"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1254
msgid "The default setting was changed to ``'short'``"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1260
msgid ""
"If True, the default argument values of functions will be not evaluated on "
"generating document.  It preserves them as is in the source code."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1265
msgid ""
"Added as an experimental feature.  This will be integrated into autodoc core"
" in the future."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1272
msgid ""
"Attempt to read ``# type: ...`` comments from source code to supplement "
"missing type annotations, if True."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1275
msgid ""
"This can be disabled if your source code does not use type comments, for "
"example if it exclusively uses type annotations or does not use type hints "
"of any kind."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1281
msgid ""
"Added the option to disable the use of type comments in via the new "
":confval:`!autodoc_use_type_comments` option, which defaults to :code-"
"py:`True` for backwards compatibility. The default will change to :code-"
"py:`False` in Sphinx 10."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1292
msgid ""
"This value controls the behavior of :option:`sphinx-build --fail-on-warning`"
" during importing modules. If ``False`` is given, autodoc forcedly "
"suppresses the error if the imported module emits warnings."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1297
msgid ""
"This option now has no effect as :option:`!--fail-on-warning` no longer "
"exits early."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1305
msgid ""
"This value controls the docstrings inheritance. If set to True the docstring"
" for classes or methods, if not explicitly set, is inherited from parents."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1316
msgid ""
":mod:`autodoc` supports suppressing warning messages via "
":confval:`suppress_warnings`. It defines the following additional warnings "
"types:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1320
msgid "autodoc"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1321
msgid "autodoc.import_object"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1325
msgid "Docstring preprocessing"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1327
msgid "autodoc provides the following additional events:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1333
msgid ""
"Emitted when autodoc has read and processed a docstring.  *lines* is a list "
"of strings -- the lines of the processed docstring -- that the event handler"
" can modify **in place** to change what Sphinx puts into the output."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:0
msgid "Parameters"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1337
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1356
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1368
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1397
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1429
msgid "the Sphinx application object"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1338
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1369
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1430
msgid ""
"the type of the object which the docstring belongs to (one of ``'module'``, "
"``'class'``, ``'exception'``, ``'function'``, ``'method'``, ``'attribute'``)"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1341
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1372
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1398
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1433
msgid "the fully qualified name of the object"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1342
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1357
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1373
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1399
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1434
msgid "the object itself"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1343
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1374
#: ../../sphinx/doc/usage/extensions/autodoc.rst:1437
msgid ""
"the options given to the directive: an object with attributes "
"``inherited_members``, ``undoc_members``, ``show_inheritance`` and ``no-"
"index`` that are true if the flag option of same name was given to the auto "
"directive"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1347
msgid "the lines of the docstring, see above"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1353
msgid ""
"Emitted before autodoc formats a signature for an object. The event handler "
"can modify an object to change its signature."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1358
msgid "a boolean indicates an object is bound method or not"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1364
msgid ""
"Emitted when autodoc has formatted a signature for an object. The event "
"handler can return a new tuple ``(signature, return_annotation)`` to change "
"what Sphinx puts into the output."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1378
msgid ""
"function signature, as a string of the form ``'(parameter_1, "
"parameter_2)'``, or ``None`` if introspection didn't succeed and signature "
"wasn't specified in the directive."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1381
msgid ""
"function return annotation as a string of the form ``' -> annotation'``, or "
"``None`` if there is no return annotation"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1384
msgid ""
"The :mod:`sphinx.ext.autodoc` module provides factory functions for commonly"
" needed docstring processing in event :event:`autodoc-process-docstring`:"
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.6/x64/lib/python3.13/site-packages/sphinx/ext/autodoc/_event_listeners.pydocstring
#: of sphinx.ext.autodoc._event_listeners.cut_lines:1
msgid ""
"Return a listener that removes the first *pre* and last *post* lines of "
"every docstring.  If *what* is a sequence of strings, only docstrings of a "
"type in *what* will be processed."
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.6/x64/lib/python3.13/site-packages/sphinx/ext/autodoc/_event_listeners.pydocstring
#: of sphinx.ext.autodoc._event_listeners.cut_lines:5
msgid "Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::"
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.6/x64/lib/python3.13/site-packages/sphinx/ext/autodoc/_event_listeners.pydocstring
#: of sphinx.ext.autodoc._event_listeners.cut_lines:11
msgid ""
"This can (and should) be used in place of :confval:`automodule_skip_lines`."
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.6/x64/lib/python3.13/site-packages/sphinx/ext/autodoc/_event_listeners.pydocstring
#: of sphinx.ext.autodoc._event_listeners.between:1
msgid ""
"Return a listener that either keeps, or if *exclude* is True excludes, lines"
" between lines that match the *marker* regular expression.  If no line "
"matches, the resulting docstring would be empty, so no change will be made "
"unless *keepempty* is true."
msgstr ""

#: ../../../../../../../opt/hostedtoolcache/Python/3.13.6/x64/lib/python3.13/site-packages/sphinx/ext/autodoc/_event_listeners.pydocstring
#: of sphinx.ext.autodoc._event_listeners.between:6
msgid ""
"If *what* is a sequence of strings, only docstrings of a type in *what* will"
" be processed."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1392
msgid ""
"Emitted when autodoc has read and processed a class to determine the base-"
"classes.  *bases* is a list of classes that the event handler can modify "
"**in place** to change what Sphinx puts into the output.  It's emitted only "
"if ``show-inheritance`` option given."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1400
msgid "the options given to the class directive"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1401
msgid "the list of base classes signature. see above."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1406
msgid ""
"``bases`` can contain a string as a base class name. It will be processed as"
" reStructuredText."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1411
msgid "Skipping members"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1413
msgid ""
"autodoc allows the user to define a custom method for determining whether a "
"member should be included in the documentation by using the following event:"
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1420
msgid ""
"Emitted when autodoc has to decide whether a member should be included in "
"the documentation.  The member is excluded if a handler returns ``True``.  "
"It is included if the handler returns ``False``."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1424
msgid ""
"If more than one enabled extension handles the ``autodoc-skip-member`` "
"event, autodoc will use the first non-``None`` value returned by a handler. "
"Handlers should return ``None`` to fall back to the skipping behavior of "
"autodoc and other enabled extensions."
msgstr ""

#: ../../sphinx/doc/usage/extensions/autodoc.rst:1435
msgid ""
"a boolean indicating if autodoc will skip this member if the user handler "
"does not override the decision"
msgstr ""

# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2024, the Sphinx developers
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 8.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-24 00:49+0000\n"
"PO-Revision-Date: 2023-10-03 00:37+0000\n"
"Language-Team: Catalan (Spain) (https://app.transifex.com/sphinx-doc/teams/15434/ca_ES/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ca_ES\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../sphinx/doc/usage/domains/python.rst:5
msgid "The Python Domain"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:9
msgid ""
"The Python domain (name **py**) provides the following directives for module"
" declarations:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:14
msgid ""
"This directive marks the beginning of the description of a module (or "
"package submodule, in which case the name should be fully qualified, "
"including the package name).  A description of the module such as the "
"docstring can be placed in the body of the directive."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:19
msgid "This directive will also cause an entry in the global module index."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:23
msgid "Module directives support body content."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:26
#: ../../sphinx/doc/usage/domains/python.rst:83
#: ../../sphinx/doc/usage/domains/python.rst:132
#: ../../sphinx/doc/usage/domains/python.rst:166
#: ../../sphinx/doc/usage/domains/python.rst:220
#: ../../sphinx/doc/usage/domains/python.rst:266
#: ../../sphinx/doc/usage/domains/python.rst:298
#: ../../sphinx/doc/usage/domains/python.rst:345
#: ../../sphinx/doc/usage/domains/python.rst:378
msgid "options"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:30
msgid ""
"Indicate platforms which the module is available (if it is available on all "
"platforms, the option should be omitted).  The keys are short identifiers; "
"examples that are in use include \"IRIX\", \"Mac\", \"Windows\" and "
"\"Unix\".  It is important to use a key which has already been used when "
"applicable."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:39
msgid ""
"Consist of one sentence describing the module's purpose -- it is currently "
"only used in the Global Module Index."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:45
msgid ""
"Mark a module as deprecated; it will be designated as such in various "
"locations then."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:51
msgid ""
"This directive tells Sphinx that the classes, functions etc. documented from"
" here are in the given module (like :rst:dir:`py:module`), but it will not "
"create index entries, an entry in the Global Module Index, or a link target "
"for :rst:role:`py:mod`.  This is helpful in situations where documentation "
"for things in a module is spread over multiple files or sections -- one "
"location has the :rst:dir:`py:module` directive, the others only "
":rst:dir:`py:currentmodule`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:59
msgid "The following directives are provided for module and class contents:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:64
msgid ""
"Describes a module-level function. The signature should include the "
"parameters, together with optional type parameters, as given in the Python "
"function definition, see :ref:`signatures`. For example::"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:73
msgid "For methods you should use :rst:dir:`py:method`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:75
msgid ""
"The description normally includes information about the parameters required "
"and how they are used (especially whether mutable objects passed as "
"parameters are modified), side effects, and possible exceptions."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:79
msgid ""
"This information can (in any ``py`` directive) optionally be given in a "
"structured form, see :ref:`info-field-lists`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:87
msgid "Indicate the function is an async function."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:94
#: ../../sphinx/doc/usage/domains/python.rst:146
#: ../../sphinx/doc/usage/domains/python.rst:224
#: ../../sphinx/doc/usage/domains/python.rst:280
#: ../../sphinx/doc/usage/domains/python.rst:396
msgid ""
"Describe the location where the object is defined if the object is imported "
"from other modules"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:108
msgid ""
"Ensures that the function's arguments will be emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and "
":confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:117
msgid ""
"Ensure that the function's type parameters are emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and "
":confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:126
msgid ""
"Describes global data in a module, including both variables and values used "
"as \"defined constants.\" Consider using :rst:dir:`py:type` for type aliases"
" instead and :rst:dir:`py:attribute` for class variables and instance "
"attributes."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:161
msgid ""
"Describes an exception class. The signature can, but need not include "
"parentheses with constructor arguments, or may optionally include type "
"parameters (see :pep:`695`)."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:170
#: ../../sphinx/doc/usage/domains/python.rst:232
msgid "Indicate the class is a final class."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:183
msgid "See :rst:dir:`py:class:single-line-parameter-list`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:190
msgid "See :rst:dir:`py:class:single-line-type-parameter-list`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:198
msgid ""
"Describes a class. The signature can optionally include type parameters (see"
" :pep:`695`) or parentheses with parameters which will be shown as the "
"constructor arguments. See also :ref:`signatures`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:203
msgid ""
"Methods and attributes belonging to the class should be placed in this "
"directive's body.  If they are placed outside, the supplied name should "
"contain the class name so that cross-references still work.  Example::"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:217
msgid "The first way is the preferred one."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:245
msgid ""
"Ensures that the class constructor's arguments will be emitted on a single "
"logical line, overriding :confval:`python_maximum_signature_line_length` and"
" :confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:254
msgid ""
"Ensure that the class type parameters are emitted on a single logical line, "
"overriding :confval:`python_maximum_signature_line_length` and "
":confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:260
msgid ""
"Describes an object data attribute.  The description should include "
"information about the type of the data to be expected and whether it may be "
"changed directly. Type aliases should be documented with :rst:dir:`py:type`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:293
msgid "Describes an object property."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:302
msgid "Indicate the property is abstract."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:307
msgid "Indicate the property is a classmethod."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:322
msgid "Describe a :ref:`type alias <python:type-aliases>`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:324
msgid ""
"The type that the alias represents should be described with the "
":rst:dir:`!canonical` option. This directive supports an optional "
"description body."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:328
msgid "For example:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:336
msgid "will be rendered as follows:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:342
msgid "Represent a 64-bit positive integer."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:349
msgid "The canonical type represented by this alias, for example:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:358
msgid "This is rendered as:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:365
msgid "Represent a regular expression or a compiled pattern."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:372
msgid ""
"Describes an object method.  The parameters should not include the ``self`` "
"parameter.  The description should include similar information to that "
"described for ``function``.  See also :ref:`signatures` and :ref:`info-"
"field-lists`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:382
msgid "Indicate the method is an abstract method."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:389
msgid "Indicate the method is an async method."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:404
msgid "Indicate the method is a class method."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:411
msgid "Indicate the method is a final method."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:424
msgid ""
"Ensures that the method's arguments will be emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and "
":confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:433
msgid ""
"Ensure that the method's type parameters are emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and "
":confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:442
msgid "Indicate the method is a static method."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:450
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a static method."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:457
msgid ""
"Like :rst:dir:`py:method`, but indicates that the method is a class method."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:465
msgid ""
"Describes a decorator function.  The signature should represent the usage as"
" a decorator.  For example, given the functions"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:480
msgid "the descriptions should look like this::"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:490
msgid "(as opposed to ``.. py:decorator:: removename(func)``.)"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:492
msgid ""
"There is no ``py:deco`` role to link to a decorator that is marked up with "
"this directive; rather, use the :rst:role:`py:func` role."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:498
msgid ""
"Ensures that the decorator's arguments will be emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and "
":confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:507
msgid ""
"Ensure that the decorator's type parameters are emitted on a single logical "
"line, overriding :confval:`python_maximum_signature_line_length` and "
":confval:`maximum_signature_line_length`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:517
msgid "Same as :rst:dir:`py:decorator`, but for decorators that are methods."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:519
msgid "Refer to a decorator method using the :rst:role:`py:meth` role."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:524
msgid "Python Signatures"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:526
msgid ""
"Signatures of functions, methods and class constructors can be given like "
"they would be written in Python."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:529
msgid ""
"Default values for optional arguments can be given (but if they contain "
"commas, they will confuse the signature parser).  Python 3-style argument "
"annotations can also be given as well as return type annotations::"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:535
msgid ""
"For functions with optional parameters that don't have default values "
"(typically functions implemented in C extension modules without keyword "
"argument support), you can use brackets to specify the optional parts:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:543
msgid "It is customary to put the opening bracket before the comma."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:545
msgid ""
"Python 3.12 introduced *type parameters*, which are type variables declared "
"directly  within the class or function definition:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:556
msgid "The corresponding reStructuredText documentation would be:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:564
msgid "See :pep:`695` and :pep:`696` for details and the full specification."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:569
msgid "Info field lists"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:574
msgid "meta fields are added."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:576
msgid ""
"Inside Python object description directives, reStructuredText field lists "
"with these fields are recognized and formatted nicely:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:580
msgid ""
"``param``, ``parameter``, ``arg``, ``argument``, ``key``, ``keyword``: "
"Description of a parameter."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:582
msgid "``type``: Type of a parameter.  Creates a link if possible."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:583
msgid ""
"``raises``, ``raise``, ``except``, ``exception``: That (and when) a specific"
" exception is raised."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:585
msgid "``var``, ``ivar``, ``cvar``: Description of a variable."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:586
msgid "``vartype``: Type of a variable.  Creates a link if possible."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:587
msgid "``returns``, ``return``: Description of the return value."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:588
msgid "``rtype``: Return type.  Creates a link if possible."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:589
msgid ""
"``meta``: Add metadata to description of the python object.  The metadata "
"will not be shown on output document.  For example, ``:meta private:`` "
"indicates the python object is private member.  It is used in "
":py:mod:`sphinx.ext.autodoc` for filtering members."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:596
msgid ""
"In current release, all ``var``, ``ivar`` and ``cvar`` are represented as "
"\"Variable\".  There is no difference at all."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:599
msgid ""
"The field names must consist of one of these keywords and an argument "
"(except for ``returns`` and ``rtype``, which do not need an argument).  This"
" is best explained by an example::"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:617
msgid "This will render like this:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:623
msgid "Send a message to a recipient"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:0
msgid "Parameters"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:625
msgid "The person sending the message"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:626
msgid "The recipient of the message"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:627
msgid "The body of the message"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:628
msgid "The priority of the message, can be a number 1-5"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:0
msgid "Returns"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:630
msgid "the message id"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:0
msgid "Return type"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:0
msgid "Raises"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:632
msgid "if the message_body exceeds 160 characters"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:633
msgid "if the message_body is not a basestring"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:635
msgid ""
"It is also possible to combine parameter type and description, if the type "
"is a single word, like this::"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:642
msgid ""
"Container types such as lists and dictionaries can be linked automatically "
"using the following syntax::"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:652
msgid ""
"Multiple types in a type field will be linked automatically if separated by "
"the word \"or\"::"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:662
msgid "Cross-referencing Python objects"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:664
msgid ""
"The following roles refer to objects in modules and are possibly hyperlinked"
" if a matching identifier is found:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:669
msgid ""
"Reference a module; a dotted name may be used.  This should also be used for"
" package names."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:674
msgid ""
"Reference a Python function; dotted names may be used.  The role text needs "
"not include trailing parentheses to enhance readability; they will be added "
"automatically by Sphinx if the :confval:`add_function_parentheses` config "
"value is ``True`` (the default)."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:681
msgid "Reference a module-level variable."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:685
msgid ""
"Reference a \"defined\" constant.  This may be a Python variable that is not"
" intended to be changed."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:690
msgid "Reference a class; a dotted name may be used."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:694
msgid ""
"Reference a method of an object.  The role text can include the type name "
"and the method name; if it occurs within the description of a type, the type"
" name can be omitted.  A dotted name may be used."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:700
msgid "Reference a data attribute of an object."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:702
msgid "The role is also able to refer to property."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:706
msgid "Reference a type alias."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:710
msgid "Reference an exception.  A dotted name may be used."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:714
msgid ""
"Reference an object of unspecified type.  Useful e.g. as the "
":confval:`default_role`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:721
msgid "Target specification"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:723
msgid ""
"The target can be specified as a fully qualified name (e.g. "
"``:py:meth:`my_module.MyClass.my_method```) or any shortened version (e.g. "
"``:py:meth:`MyClass.my_method``` or ``:py:meth:`my_method```). See `target "
"resolution`_ for details on the resolution of shortened names."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:729
msgid ""
":ref:`Cross-referencing modifiers <xref-modifiers>` can be applied. In "
"short:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:732
msgid ""
"You may supply an explicit title and reference target: "
"``:py:mod:`mathematical functions <math>``` will refer to the ``math`` "
"module, but the link text will be \"mathematical functions\"."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:736
msgid ""
"If you prefix the content with an exclamation mark (``!``), no "
"reference/hyperlink will be created."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:739
msgid ""
"If you prefix the content with ``~``, the link text will only be the last "
"component of the target. For example, ``:py:meth:`~queue.Queue.get``` will "
"refer to ``queue.Queue.get`` but only display ``get`` as the link text."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:746
msgid "Target resolution"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:748
msgid ""
"A given link target name is resolved to an object using the following "
"strategy:"
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:750
msgid ""
"Names in these roles are searched first without any further qualification, "
"then with the current module name prepended, then with the current module "
"and class name (if any) prepended."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:754
msgid ""
"If you prefix the name with a dot (``.``), this order is reversed. For "
"example, in the documentation of Python's :py:mod:`codecs` module, "
"``:py:func:`open``` always refers to the built-in function, while "
"``:py:func:`.open``` refers to :func:`codecs.open`."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:759
msgid ""
"A similar heuristic is used to determine whether the name is an attribute of"
" the currently documented class."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:762
msgid ""
"Also, if the name is prefixed with a dot, and no exact match is found, the "
"target is taken as a suffix and all object names with that suffix are "
"searched. For example, ``:py:meth:`.TarFile.close``` references the "
"``tarfile.TarFile.close()`` function, even if the current module is not "
"``tarfile``.  Since this can get ambiguous, if there is more than one "
"possible match, you will get a warning from Sphinx."
msgstr ""

#: ../../sphinx/doc/usage/domains/python.rst:769
msgid ""
"Note that you can combine the ``~`` and ``.`` prefixes: "
"``:py:meth:`~.TarFile.close``` will reference the "
"``tarfile.TarFile.close()`` method, but the visible link caption will only "
"be ``close()``."
msgstr ""
